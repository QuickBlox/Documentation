swagger: '2.0'
info:
  title: QuickBlox REST API, Users API.
  description: |
    The Users APIs manage all things related to user accounts handling, authentication, account data, password reminding etc.
    * OAuth is secure and supports transparent authentication;
    * Logging in users with their Facebook/Twitter/Twitter Digits accounts is available;
    * User tags – set up user tags and address them separately in your app or through the admin panel – supported by other modules such as Push Notifications;
    * Existing user base integration – our module supports connection to your system by storing your existent IDs table and matching them to new ones.
  version: 1.0
# the domain of the service
host: quickblox.com
# array of all schemes that QuickBlox API supports
schemes:
  - https
basePath: /api
produces:
  - application/json
paths:
  /users.json:
    post:
      summary: Sign Up
      operationId: Users_1
      description: |
        Sign up a new user for the identification of the application users.
        QuickBlox enforces the uniqueness of the **login**, **email**, **facebook_id**, **twitter_id**, **twitter_digits_id** and **external_user_id** fields.
        You can ask QuickBlox to verify user email addresses (require email confirmation) in your application settings page in [Dashboard](https://admin.quickblox.com).
        Also you can setup custom email templates and pages for **Users greetings**, **Reset password** and **Email confirmation** features.
      parameters:
        - name: user[login]
          in: formData
          description: User login. At least **user[login]** or **user[email]** is required.
          required: true
          type: String
          default: samuelrulez
        - name: user[password]
          in: formData
          description: User password
          required: true
          type: string
          default: WzRAY9vrGmb6FfP
        - name: user[email]
          in: formData
          description: User email. At least **user[login]** or **user[email]** is required.
          required: true
          type: string
          default: awesomeemail@domain.com
      responses:
        '201':
          description: "User object"
          schema:
            $ref: '#/definitions/UserObject'
definitions:
  UserObject:
    type: object
    properties:
      _id:
        type: string
        example: 0e7bc95d85c0eb2bf052be3d29d3df523081e87f
      application_id:
        type: integer
        example: 92
      created_at:
        type: string
        example: "2012-04-03T07:34:48Z"
      nonce:
        type: integer
        example: 18945
      token:
        type: string
        example: "1e7bc99d85c0eb2bf062be3d29d3df523081e874"
      ts:
        type: integer
        example: 1473075233
      updated_at:
        type: string
        example: "2012-04-03T07:34:48Z"
      user_id:
        type: integer
        example: 302
      id:
        type: integer
        example: 326
