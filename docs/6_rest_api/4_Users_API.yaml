swagger: '2.0'
info:
  title: QuickBlox REST API, Users API.
  description: |
    The Users APIs manage all things related to user accounts handling, authentication, account data, password reminding etc:<br>
      - OAuth is secure and supports transparent authentication<br>
      - Logging in users with their Facebook/Twitter/Twitter Digits accounts is available<br>
      - User tags – set up user tags and address them separately in your app or through the admin panel – supported by other modules such as Push Notifications<br>
      - Existing user base integration – our module supports connection to your system by storing your existent IDs table and matching them to new ones.
  version: 1.0
# the domain of the service
host: quickblox.com
# array of all schemes that QuickBlox API supports
schemes:
  - https
basePath: /api
produces:
  - application/json
paths:
  /users.json:
    post:
      summary: Sign Up
      operationId: Sign_Up_Id
      description: |
        Registers a new app user.
        Call this API to register a user for the app. You must provide either a user **login** or **email** address along with their **passwor**, passing both email address and login is permitted but not required.
        You can ask QuickBlox to verify user email addresses (require email confirmation) in your application settings page in [Dashboard](https://admin.quickblox.com).
        Also you can setup custom email templates and pages for **Users greetings**, **Reset password** and **Email confirmation** features.
      parameters:
        - name: user[login]
          in: formData
          description: The user's login name
          required: true
          type: string
          default: samuelrulez
        - name: user[password]
          in: formData
          description: The user's password for this app
          required: true
          type: string
          default: WzRAY9vrGmb6FfP
        - name: user[email]
          in: formData
          description: The user's email address
          required: true
          type: string
          default: awesome@domain.com
        - name: user[full_name]
          in: formData
          description: The user's full name
          required: false
          type: string
          default: Captain Jack
        - name: user[phone]
          in: formData
          description: The user's telephone number
          required: false
          type: string
          default: 4487556488
        - name: user[website]
          in: formData
          description: The user's web address, or other url
          required: false
          type: string
          default: https://quickblox.com
        - name: user[facebook_id]
          in: formData
          description: The user's facebook uid
          required: false
          type: string
          default: 100000883956766
        - name: user[twitter_id]
          in: formData
          description: The user's twitter uid
          required: false
          type: string
          default: 23434883956766
        - name: user[twitter_digits_id]
          in: formData
          description: The user's twitter digits uid
          required: false
          type: string
          default: 67434863956765
        - name: user[blob_id]
          in: formData
          description: The id of an assoicated blob for this user, for example their photo
          required: false
          type: integer
          default: 12312412
        - name: user[external_user_id]
          in: formData
          description: An uid that represents the user in an external user registry
          required: false
          type: string
          default: 21445
        - name: user[tag_list]
          in: formData
          description: A comma seperated list of tags associated with the user. Set up user tags and address them separately in your app.
          required: false
          type: string
          default: man,car,mac
        - name: user[custom_data]
          in: formData
          description: The user's additional info
          required: false
          type: string
          default: age=34&lang=en
      responses:
        '201':
          description: "User object"
          schema:
            $ref: '#/definitions/UserResponse'
  /login.json:
    post:
      summary: Sign In
      operationId: Sign_In_Id
      description: |
        After you allow users to sign up, you need to let them log in to their account with a login/email and password in the future.
        You must provide the user's login or email address along with a password when authenticating users that are registered in QuickBlox.
      parameters:
        - name: login
          in: formData
          description: The user's login, you must provide either the user's login or email.
          required: true
          type: string
          default: samuelrulez
        - name: email
          in: formData
          description: The user's email address, you must provide either the user's login or email.
          required: true
          type: string
          default: awesome@quickblox.com
        - name: password
          in: formData
          description: The user's password.
          required: true
          type: string
          default: bad-as-password
        - name: provider
          in: formData
          description: Name of the social network provider to login User with, eg. **facebook**, **twitter**, **twitter_digits**.
          required: false
          type: string
          default: facebook
        - name: keys[token]
          in: formData
          description: Your app's access token for the social network platform to login User with.
          required: false
          type: string
          default: |
            AM46dxjhisdffgry262
            82352fdusdfusdfgsdf
        - name: keys[secret]
          in: formData
          description: Your app's access token secret for the social network platform to login User with (currently only required for Twitter integration)
          required: false
          type: string
          default: |
            t35400dfzxcxvsdfn
            76gancHDHoad7a7fs
        - name: |
            twitter_digits
            [X-Auth-Service-Provider]
          in: formData
          description: Twitter Digits auth header to login User with.
          required: false
          type: string
          default: |
            https://api.digits.com/1.1
            /sdk/account.json
        - name: |
            twitter_digits
            [X-Verify-Credentials-Authorization]
          in: formData
          description: Twitter Digits auth header to login User with.
          required: false
          type: string
          default: |
            OAuth
            oauth_signature=...,
            oauth_nonce=...,
            oauth_timestamp=...,
            oauth_consumer_key=...,
            oauth_token=...,
            oauth_version=...,
            oauth_signature_method=...
      responses:
        '200':
          description: "User object"
          schema:
            $ref: '#/definitions/UserObject'
    delete:
      summary: Sign Out
      operationId: Sign_Out_Id
      description: |
        Logout a user.
        Calling this api downgrades the session token to an Application session token
      responses:
        '200':
          description: "Empty body"
  /password/reset.json:
    get:
      summary: Password reset
      operationId: Password_Reset_Id
      description: |
        You can initiate password resets for users who have emails associated with their account.
        Password reset instruction will be sent to this email address.
      parameters:
        - name: email
          in: formData
          description: The user's email to send reset password instruction.
          required: true
          type: string
          default: awesome@quickblox.com
      responses:
        '200':
          description: "Empty body"
  /users/{user_id}.json:
    put:
      summary: Update current user
      operationId: Update_User_id
      description: |
        Update current user. In normal usage, nobody except the user is allowed to modify their own data.
        Any fields you don’t specify will remain unchanged, so you can update just a subset of the user’s data.
        **login**/**email** and **password** may be changed, but the new **login**/**email** must not already be in use.
      parameters:
        - name: user_id
          in: formData
          description: The id of the user to be updated (path parameter)
          required: true
          type: integer
          default: 53454
        - name: user[login]
          in: formData
          description: The user's login name
          required: false
          type: string
          default: samuelrulez
        - name: user[old_password]
          in: formData
          description: The user's old password for this app
          required: false
          type: string
          default: rzRAY9v5Gmb6FfP9
        - name: user[password]
          in: formData
          description: The user's new password for this app
          required: false
          type: string
          default: WzRAY9vrGmb6FfP
        - name: user[email]
          in: formData
          description: The user's email address
          required: false
          type: string
          default: awesome@domain.com
        - name: user[full_name]
          in: formData
          description: The user's full name
          required: false
          type: string
          default: Captain Jack
        - name: user[phone]
          in: formData
          description: The user's telephone number
          required: false
          type: string
          default: 4487556488
        - name: user[website]
          in: formData
          description: The user's web address, or other url
          required: false
          type: string
          default: https://quickblox.com
        - name: user[facebook_id]
          in: formData
          description: The user's facebook uid
          required: false
          type: string
          default: 100000883956766
        - name: user[twitter_id]
          in: formData
          description: The user's twitter uid
          required: false
          type: string
          default: 23434883956766
        - name: user[twitter_digits_id]
          in: formData
          description: The user's twitter digits uid
          required: false
          type: string
          default: 67434863956765
        - name: user[blob_id]
          in: formData
          description: The id of an assoicated blob for this user, for example their photo
          required: false
          type: integer
          default: 12312412
        - name: user[external_user_id]
          in: formData
          description: An uid that represents the user in an external user registry
          required: false
          type: string
          default: 21445
        - name: user[tag_list]
          in: formData
          description: A comma seperated list of tags associated with the user. Set up user tags and address them separately in your app.
          required: false
          type: string
          default: man,car,mac
        - name: user[custom_data]
          in: formData
          description: The user's additional info
          required: false
          type: string
          default: age=34&lang=en
      responses:
        '200':
          description: "User object"
          schema:
            $ref: '#/definitions/UserResponse'
  /users/{user_id}.json:
    get:
      summary: Retrieve user by id
      operationId: Retrieve_User_By_Id_Id
      description: |
        Retrieve a specific user by user id
      parameters:
        - name: user_id
          in: formData
          description: The id of the user to be retrieved (path parameter)
          required: true
          type: integer
          default: 53454
      responses:
        '200':
          description: "User object"
          schema:
            $ref: '#/definitions/UserResponse'
  /users/by_login.json:
    get:
      summary: Retrieve user by login
      operationId: Retrieve_User_By_Login_Id
      description: |
        Retrieve a specific user by user login
      parameters:
        - name: login
          in: formData
          description: The login of the user to be retrieved
          required: true
          type: string
          default: samuel67
      responses:
        '200':
          description: "User object"
          schema:
            $ref: '#/definitions/UserResponse'
  /users/by_full_name.json:
    get:
      summary: Retrieve user by full name
      operationId: Retrieve_User_By_Full_Name_Id
      description: |
        Retrieve users by user full name
      parameters:
        - name: full_name
          in: formData
          description: The full name of the user to be retrieved
          required: true
          type: string
          default: samuel67
        - name: page
          in: formData
          description: Used to paginate the results when more than one page of users retrieved
          required: true
          type: integer
          default: 4
        - name: per_page
          in: formData
          description: The maximum number of users to return per page, if not specified then the default is 10
          required: true
          type: integer
          default: 30
      responses:
        '200':
          description: "Array of users"
          schema:
            $ref: '#/definitions/ArrayOfUsersResponse'
  /users/by_facebook_id.json:
    get:
      summary: Retrieve user by Facebook id
      operationId: Retrieve_User_By_Facebook_Id
      description: |
        Retrieve a specific user by Facebook id
      parameters:
        - name: facebook_id
          in: formData
          description: The user's facebook uid
          required: true
          type: string
          default: 100000883956766
      responses:
        '200':
          description: "User object"
          schema:
            $ref: '#/definitions/UserResponse'
  /users/by_twitter_id.json:
    get:
      summary: Retrieve user by Twitter id
      operationId: Retrieve_User_By_Twitter_Id
      description: |
        Retrieve a specific user by Twitter id
      parameters:
        - name: twitter_id
          in: formData
          description: The user's twitter uid
          required: true
          type: string
          default: 23434883956766
      responses:
        '200':
          description: "User object"
          schema:
            $ref: '#/definitions/UserResponse'
  /users/by_twitter_digits_id.json:
    get:
      summary: Retrieve user by Twitter Digits id
      operationId: Retrieve_User_By_Twitter_Digits_Id
      description: |
        Retrieve a specific user by Twitter Digits id
      parameters:
        - name: twitter_digits_id
          in: formData
          description: The user's twitter digits uid
          required: true
          type: string
          default: 67434863956765
      responses:
        '200':
          description: "User object"
          schema:
            $ref: '#/definitions/UserResponse'
definitions:
  UserResponse:
    properties:
      user:
        $ref: '#/definitions/UserObject'
  ArrayOfUsersResponse:
    properties:
      current_page:
        type: integer
        example: 1
      per_page:
        type: integer
        example: 10
      total_entries:
        type: integer
        example: 23
      items:
        type: array
        items:
          $ref: '#/definitions/UserObject'
  UserObject:
    properties:
      id:
        type: integer
        example: 1639
      full_name:
        type: string
        example: John doe
      login:
        type: string
        example: samuelrulez
      phone:
        type: string
        example: 8765554351
      website:
        type: string
        example: https://quickblox.com
      created_at:
        type: string
        example: 2012-05-09T10:24:26Z
      updated_at:
        type: string
        example: 2012-05-09T10:24:26Z
      last_request_at:
        type: string
        example: 2012-05-09T10:24:26Z
      facebook_id:
        type: string
        example: 100000883956766
      twitter_id:
        type: string
        example: 23434883956766
      twitter_digits_id:
        type: string
        example: 67434863956765
      external_user_id:
        type: string
        example: 12334
      blob_id:
        type: integer
        example: 234435
      custom_data:
        type: string
        example: age=34&lang=en
      user_tags:
        type: string
        example: man,car
