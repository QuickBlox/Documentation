swagger: '2.0'
info:
  title: QuickBlox REST API, Push Notifications API.
  description: |
    Employs QuickBlox servers’ power to send thousands of technical and marketing
    messages to your users. Two channels are supported:<br><br>
    • Push Notifications – sends iOS, Android, WP, BlackBerry pushes. This is being used for technical notifications, reminders and marketing messages. Also used as IM, enabling you or your users to send direct messages to other users (even if they are offline and not using the app). Can be integrated with other functions within the particular application.<br>
    • Emails – sending e-mails to your users. This is being used for users registration, password reminders, marketing newsletter etc<br>
    <br>
    Features:<br><br>
    • Messages Queue – messages can be either sent instantly or assigned a specific time/date and pushed into a Message Queue which allows to send delayed and recurring messages such as reminders, planned marketing announcements or any planned notifications for the better engagement of the users. <br>
    • Recurring notifications – set up a time interval and the message will be repeated automatically by the server. <br>
    • User tags - a feature powered by integration with our Users module, allowing to specify a group of users the message shall be sent to. <br>
    • Media attachments (send rich media attachments such as video, audio and location data, including video streaming, powered by our Content module). Not available for emails. <br>
    <br>
  version: 1.0
# the domain of the service
host: quickblox.com
# array of all schemes that QuickBlox API supports
schemes:
  - https
basePath: /api
produces:
  - application/json
paths:
  /subscriptions.json:
    post:
      summary: Create subscription
      operationId: 101_Create_Subscription
      description: |
        Create device based subscription (subscribes).
      parameters:
        - name: notification_channel
          in: formData
          description: |
            Declare which notification channels could be used to notify user about events.
            Allowed values: **apns**, **apns_voip**, **gcm**, **mpns**, **bbps** and **email**.
          required: true
          type: string
          default: apns
        - name: push_token[environment]
          in: formData
          description: |
            Determine application mode. It allows conveniently separate development and production modes.
            Allowed values: **evelopment** or **production**.
          required: true
          type: enum
          default: development
        - name: push_token[bundle_identifier]
          in: formData
          description: |
            A unique identifier for client's application.
            In iOS, this is the Bundle Identifier. In Android - package id.
          required: false
          type: string
          default: com.quickblox.supresample
        - name: push_token[client_identification_sequence]
          in: formData
          description: |
            Identifies client device in 3-rd party service like APNS, GCM/FCM, BBPS or MPNS.
            Initially retrieved from 3-rd service and should be send to QuickBlox to let it send push notifications to the client.
          required: true
          type: string
          default: aa557232bc237245ba67686..
        - name: device[platform]
          in: formData
          description: |
            Platform of device, which is the source of application running.
            Allowed values: **ios**, **android**, **windows_phone**, **blackberry**.
          required: true
          type: string
          default: ios
        - name: device[udid]
          in: formData
          description: |
            UDID (Unique Device identifier) of device, which is the source of application running.
            This must be anything sequence which uniquely identify particular device.
            This is needed to support schema: 1 User - Multiple devices.
          required: true
          type: string
          default: 2343af3433aa3a4fsv
      responses:
        '201':
          description: "Array of all existent user's subscriptions"
          schema:
            $ref: '#/definitions/SubscriptionResponse'
    get:
      summary: Retrieve subscriptions
      operationId: 102_Retrieve_Subscriptions
      description: |
        Retrieve subscriptions for the user which is specified in the session token.
      responses:
        '200':
          description: "Array of all existent user's subscriptions"
          schema:
            $ref: '#/definitions/SubscriptionResponse'
  /subscriptions/{subscription_id}.json:
    delete:
      summary: Remove subscription
      operationId: 103_Remove_Subscription
      description: |
        Remove a subscription by its identifier (unsubscribes).
      parameters:
        - name: subscription_id
          in: formData
          description: An id of subscription to remove (path parameter)
          required: true
          type: integer
          default: 34891
      responses:
        '200':
          description: "Empty body"
  /events.json:
    post:
      summary: Create event
      operationId: 104_Create_Event
      description: |
        Create notification event.
        This request will immediately produce notification delivery (push notification or email).
      parameters:
        - name: event[notification_type]
          in: formData
          description: |
            Type of notification.
            Allowed values: **push** or **email**.
          required: true
          type: enum
          default: push
        - name: event[push_type]
          in: formData
          description: |
            Push Notification type. Used only if **event[notification_type] = push**, ignored in other cases.
            If not present - Notification will be delivered to all possible devices for specified users. Each platform has their own standard format. See [Quickblox Standard Push Notifications Formats](https://quickblox.com) for more information.
            If specified - Notification will be delivered to the specified platform only.
            Allowed values: **apns**, **apns_voip**, **gcm**, **mpns** or **bbps**.
          required: false
          type: enum
          default: apns
        - name: event[environment]
          in: formData
          description: |
            An environment of the notification.
            Allowed values: **development** or **production**.
          required: true
          type: enum
          default: development
        - name: event[event_type]
          in: formData
          description: |
            Allowed values: **one_shot**, **fixed_date** or **period_date**.
            **one_shot** - a one-time event, which causes by an external object (the value is only valid if the 'date' is not specified).
            **fixed_date** - a one-time event, which occurs at a specified 'date' (the value is valid only if the 'date' is given).
            **period_date** - reusable event that occurs within a given 'period' from the initial 'date' (the value is only valid if the 'period' specified).
            By default:
            **fixed_date**, if 'date' is specified.
            **period_date**, if 'period' is specified.
            **one_shot**, if 'date' is not specified.
          required: false
          type: enum
          default: one_shot
        - name: event[message]
          in: formData
          description: |
            A payload of event.
            For push notifications:
            if **event[push_type]** not present - should be Base64 encoded text.
            if **event[push_type]** specified - should be formatted as described in [QuickBlox Push Notifications Formats](https://quickblox.com)
            For email:
            Base64 encoded text.
          required: true
          type: string
          default: payload=eyJhcHMiOns....
        - name: event[user][ids]
          in: formData
          description: |
            Notification's recipients - should contain a string of users' ids divided by commas.
          required: false
          type: string
          default: 11,25,356,489
        - name: event[external_user][ids]
          in: formData
          description: |
            Notification's recipients - should contain a string of external users' ids divided by commas.
          required: false
          type: string
          default: 15,24,367,49
        - name: event[user][tags][any]
          in: formData
          description: |
            Notification's recipients - should contain a string of tags divided by commas.
            Recipients (users) must have at least one tag that specified in the list.
          required: false
          type: string
          default: good,bad,ugly
        - name: event[user][tags][all]
          in: formData
          description: |
            Notification's recipients - should contain a string of tags divided by commas.
            Recipients (users) must exactly have only all tags that specified in list
          required: false
          type: string
          default: man,car
        - name: event[user][tags][exclude]
          in: formData
          description: |
            Notification's recipients - should contain a string of tags divided by commas.
            Recipients (users) mustn't have tags that specified in list
          required: false
          type: string
          default: man,car
        - name: event[date]
          in: formData
          description: |
            The date of the event to send on.
            Required if **event[event_type] = fixed_date** or **period_date**.
            If **event[event_type] = fixed_date**, the date can not be in the past.
          required: false
          type: integer
          default: 1492176928
        - name: event[end_date]
          in: formData
          description: |
            Date of completion of the event. Can't be less than the **event[date]**.
          required: false
          type: integer
          default: 1892176928
        - name: event[period]
          in: formData
          description: |
            The period of the event in seconds.
            Required if the **event[event_type] = period_date**.
            Possible values:
            * 86400 (1 day).
            * 604800 (1 week).
            * 2592000 (1 month).
            * 31557600 (1 year).
          required: false
          type: integer
          default: 86400
        - name: event[name]
          in: formData
          description: |
            The name of the event. Service information. Only for your own usage.
          required: false
          type: string
          default: my event
      responses:
        '200':
          description: "Event object"
          schema:
            $ref: '#/definitions/EventResponse'
    get:
      summary: Retrieve events
      operationId: 105_Retrieve_Events
      description: |
        Get all events which were created by current user.
      responses:
        '200':
          description: "Array of events' objects"
          schema:
            $ref: '#/definitions/EventsResponse'
  /events/{event_id}.json:
    get:
      summary: Retrieve event
      operationId: 106_Retrieve_Event
      description: |
        Retrieve an event by ID.
      parameters:
        - name: event_id
          in: formData
          description: An id of event to retrieve (path parameter)
          required: true
          type: integer
          default: 34891
      responses:
        '200':
          description: "Event object"
          schema:
            $ref: '#/definitions/EventResponse'
    put:
      summary: Edit event
      operationId: 107_Edit_Event
      description: |
        Update an event by ID.
      parameters:
        - name: event_id
          in: formData
          description: An id of event to update (path parameter)
          required: true
          type: integer
          default: 34891
        - name: event[active]
          in: formData
          description: |
            To mark event as active again (re-initiate delivery of notification one more time)
          required: false
          type: boolean
          default: true
        - name: event[message]
          in: formData
          description: |
            A payload of event.
            For push notifications:
            if **event[push_type]** not present - should be Base64 encoded text.
            if **event[push_type]** specified - should be formatted as described in [QuickBlox Push Notifications Formats](https://quickblox.com)
            For email:
            Base64 encoded text.
          required: false
          type: string
          default: payload=eyJhcHMiOns....
        - name: event[date]
          in: formData
          description: |
            The date of the event to send on.
            Required if **event[event_type] = fixed_date** or **period_date**.
            If **event[event_type] = fixed_date**, the date can not be in the past.
          required: false
          type: integer
          default: 1492176928
        - name: event[period]
          in: formData
          description: |
            The period of the event in seconds.
            Required if the **event[event_type] = period_date**.
            Possible values:
            * 86400 (1 day).
            * 604800 (1 week).
            * 2592000 (1 month).
            * 31557600 (1 year).
          required: false
          type: integer
          default: 86400
        - name: event[name]
          in: formData
          description: |
            The name of the event. Service information. Only for your own usage.
          required: false
          type: string
          default: my event
      responses:
        '200':
          description: "Event object"
          schema:
            $ref: '#/definitions/EventResponse'
    delete:
      summary: Delete event
      operationId: 108_Delete_Event
      description: |
        Delete an event by ID.
      parameters:
        - name: event_id
          in: formData
          description: An id of event to delete (path parameter)
          required: true
          type: integer
          default: 34891
      responses:
        '200':
          description: "Empty body"
definitions:
  SubscriptionResponse:
    properties:
      subscription:
        $ref: '#/definitions/SubscriptionObject'
  SubscriptionObject:
    properties:
      id:
        type: integer
        example: 1639
      notification_channel:
        $ref: '#/definitions/NotificationChannelObject'
      device:
        $ref: '#/definitions/DeviceObject'
  NotificationChannelObject:
    properties:
      name:
        type: string
        example: apns
  DeviceObject:
    properties:
      udid:
        type: string
        example: 3429C429-4C34-5214-8E3C-803AC0CA79ED
      platform:
        $ref: '#/definitions/PlatformObject'
  PlatformObject:
    properties:
      name:
        type: string
        example: ios
  SubscribersSelectorObject:
    properties:
      environment:
        type: string
        example: production
      user_ids:
        type: string
        example: 56,34,89
  EventResponse:
    properties:
      event:
        $ref: '#/definitions/EventObject'
  EventsResponse:
    properties:
      current_page:
        type: integer
        example: 1
      per_page:
        type: integer
        example: 10
      total_entries:
        type: integer
        example: 2
      items:
        type: array
        $ref: '#/definitions/EventObject'
  EventObject:
    properties:
      id:
        type: integer
        example: 1639
      created_at:
        type: string
        example: 2012-05-09T10:24:26Z
      updated_at:
        type: string
        example: 2012-05-09T10:24:26Z
      event_type:
        type: string
        example: one_shot
      message:
        type: string
        example: payload=eyJhcHMiOnl..
      active:
        type: boolean
        example: true
      user_id:
        type: integer
        example: 31232
      date:
        type: string
        example: null
      end_date:
        type: string
        example: null
      period:
        type: integer
        example: null
      occured_count:
        type: integer
        example: 0
      notification_channel:
        $ref: '#/definitions/NotificationChannelObject'
      subscribers_selector:
        $ref: '#/definitions/SubscribersSelectorObject'
